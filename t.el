(defface feng-highlight-at-point-face
  `((((class color) (background light))
     (:background "light green"))
    (((class color) (background dark))
     (:background "royal blue")))
  "Face for highlighting variables"
  :group 'feng-highlight)

(defun highlight-text (txt prop face)
  (interactive)
  (message txt)
  (let ((start (point-min))
        (end (point-max))
        (ovlface (or face 'hi-green)))
    (remove-overlays start end prop t)
    (unless (or (string= txt "")
                (string-match "^[\t\n\s]*$" txt)
                (string-match "\n" txt))
      (save-excursion
        (goto-char start)
        (while (re-search-forward txt end t)
          (let ((overlay (make-overlay (match-beginning 0) (match-end 0))))
            (overlay-put overlay 'face ovlface)
            (overlay-put overlay prop t))
          (goto-char (match-end 0)))))))

(defadvice mouse-start-end (after hl-double-click (start end mode) activate)
  (cond ((= mode 1)
         (highlight-text "" 'hl-double-click nil)
         (let ((txt (buffer-substring-no-properties (nth 0 ad-return-value)
                                                    (nth 1 ad-return-value))))
           (highlight-text txt 'hl-double-click 'hi-green)))
        ((= mode 2)
         (highlight-text nil 'hl-double-click nil))))

;; (defvar smart-hl-highlight-txt "")
;; (defadvice mouse-start-end (after smart-hl (start end mode) activate)
;;   (cond ((= mode 1)
;;          (unhighlight-regexp smart-hl-highlight-txt)
;;          (let ((txt (buffer-substring-no-properties (nth 0 ad-return-value) (nth 1 ad-return-value))))
;;            (unless (or (string= txt "")
;;                        (string-match "^[\t\n\s]*$" txt)
;;                        (string-match "\n" txt))
;;              (setq smart-hl-highlight-txt (concat "\\_<" (regexp-quote txt) "\\_>"))
;;              (highlight-regexp smart-hl-highlight-txt 'hi-green))))
;;         ((= mode 2)
;;          (unhighlight-regexp smart-hl-highlight-txt)))))
